name: Semgrep Publish

on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read
  deployments: write

jobs:
  Test-Rules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # This will output the results of the validation and exit with a
      # 0 for success and non-0 on error
      
      - name: Validate Rules
        shell: bash
        run: |
          docker run \
            -v .:/src \
            returntocorp/semgrep:latest \
            semgrep scan --validate --error --config /src/rules

      # This will run the test suite and output
      
      - name: Run Test Suite
        shell: bash
        run: |
          docker run \
            -v .:/src \
            returntocorp/semgrep \
            semgrep scan --test --error --time --json --quiet --config /src/rules /src/tests > output.json || true
        
      - name: Validate Test Suite
        shell: python
        run: |
          import json
          import sys
          data = {}
          with open("./output.json","r") as fp:
            data = json.load(fp)
          if len(data["config_missing_tests"]) > 0:
            print("ERROR: The following rule files are missing tests:")
            for test in data["config_missing_tests"]:
              print("  -> "+test)
            sys.exit(1)
          if len(data["results"]) == 0:
            print("Error: No test results found!")
            sys.exit(1);
          for result in data["results"].keys():
            for rule in data["results"][result]["checks"].keys():
              if data["results"][result]["checks"][rule]["passed"] == False:
                print("Error: Rule "+rule+" failed")
                for test in data["results"][result]["checks"][rule]["matches"].keys():
                  expected = data["results"][result]["checks"][rule]["matches"][test]["expected_lines"]
                  reported = data["results"][result]["checks"][rule]["matches"][test]["reported_lines"]
                  for n in reported:
                    if not n in expected:
                      print("  -> "+test+" (L:"+str(n)+")")
            
